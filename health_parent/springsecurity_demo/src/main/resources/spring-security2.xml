<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/security
       http://www.springframework.org/schema/security/spring-security.xsd">
    <!--
  http：用于定义相关权限控制
  指定哪些资源不需要进行权限校验，可以使用通配符
-->
    <security:http security="none" pattern="/js/**" />
    <security:http security="none" pattern="/css/**" />
    <security:http security="none" pattern="/login.html" />
    <security:http security="none" pattern="/pages/**" />
    <!--
    【重要】【重要】【重要】
    这里面的所有路径必须以/开头，否则启动报错
    -->

    <!--  auto-config: 自动配置，自动生成login页面，login处理，退出处理
            use-expressions: 是否使用spel表达式 true: access的值可以填表达式(hasRole, hasAuthority, hasAny....)
                             false: ROEL_角色名(必须是ROLE_打，否则启动报错), 或 security写死的几个常量

     -->
    <!--  拦截规则配置  -->
    <security:http auto-config="true" use-expressions="false">
        <!--  pattern="/**" 拦截所有的路径  access="ROLE_ADMIN"
              要访问符合pattern的url时，登陆用户必须有ROLE_ADMIN的角色，如果没有则不能访问

              security:intercept-url： 可以配置多个
         -->
        <security:intercept-url pattern="/**" access="ROLE_ADMIN"/>
        <security:form-login
                login-page="/login.html"
                username-parameter="user"
                password-parameter="password"
                login-processing-url="/login"
                default-target-url="/index.html"
                always-use-default-target="true"
                authentication-failure-url="/fail.html"
        ></security:form-login>

        <!--关闭防跨域攻击限制-->
        <security:csrf disabled="true"/>
    </security:http>


    <!--  认证管理器  -->
    <security:authentication-manager>
        <!--  认证信息提供者，认证信息的来源
              提供登陆用户信息  用户名、密码、权限集合
              user-service-ref 指向spring容器中一个bean对象, 实现这个UserDetailsService的对象, 提供用户的名称、密码、权限集合

              一旦配置了user-service-ref，就不要配置security:user-service
        -->
        <security:authentication-provider user-service-ref="userService">
            <!--指定密码加密策略-->
            <security:password-encoder ref="encoder"/>
        </security:authentication-provider>
    </security:authentication-manager>
    <!--注册userservice-->
    <bean id="userService" class="com.jd.security.UserService"/>
    <!--注册密码加密-->
    <bean id="encoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
</beans>